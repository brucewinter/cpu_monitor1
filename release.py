#!/usr/bin/env python3
"""
Release script for Enhanced CPU Monitor
"""

import json
import re
from datetime import datetime

def update_version(version_type="patch"):
    """Update version in relevant files"""
    
    # Read current version from settings or create default
    try:
        with open("settings.json", "r") as f:
            settings = json.load(f)
    except:
        settings = {}
    
    # Get current version or set default
    current_version = settings.get("version", "2.0.0")
    print(f"Current version: {current_version}")
    
    # Parse version
    major, minor, patch = map(int, current_version.split("."))
    
    # Update version based on type
    if version_type == "major":
        major += 1
        minor = 0
        patch = 0
    elif version_type == "minor":
        minor += 1
        patch = 0
    else:  # patch
        patch += 1
    
    new_version = f"{major}.{minor}.{patch}"
    print(f"New version: {new_version}")
    
    # Update settings.json
    settings["version"] = new_version
    settings["release_date"] = datetime.now().strftime("%Y-%m-%d")
    
    with open("settings.json", "w") as f:
        json.dump(settings, f, indent=2)
    
    print(f"✓ Updated settings.json to version {new_version}")
    
    # Update README.md if it contains version info
    try:
        with open("README.md", "r") as f:
            content = f.read()
        
        # Update version in README
        content = re.sub(r'### v\d+\.\d+ \(Enhanced\)', f'### v{new_version} (Enhanced)', content)
        
        with open("README.md", "w") as f:
            f.write(content)
        
        print(f"✓ Updated README.md to version {new_version}")
        
    except Exception as e:
        print(f"Warning: Could not update README.md: {e}")
    
    return new_version

def create_release_notes(version):
    """Create release notes template"""
    
    notes = f"""# Release v{version} - {datetime.now().strftime('%Y-%m-%d')}

## 🚀 New Features
- 

## 🐛 Bug Fixes
- 

## 🔧 Improvements
- 

## 📝 Documentation
- 

## 🧪 Testing
- 

---
Generated by release.py
"""
    
    filename = f"RELEASE_NOTES_v{version}.md"
    with open(filename, "w") as f:
        f.write(notes)
    
    print(f"✓ Created release notes: {filename}")
    return filename

def main():
    """Main release function"""
    print("CPU Monitor1 - Release Script")
    print("=" * 40)
    
    print("\nVersion update options:")
    print("1. patch (default) - bug fixes, small changes")
    print("2. minor - new features, backward compatible")
    print("3. major - breaking changes, major updates")
    
    choice = input("\nEnter version type (1/2/3) or press Enter for patch: ").strip()
    
    version_map = {"1": "major", "2": "minor", "3": "patch"}
    version_type = version_map.get(choice, "patch")
    
    print(f"\nUpdating to {version_type} version...")
    
    try:
        new_version = update_version(version_type)
        release_notes = create_release_notes(new_version)
        
        print(f"\n🎉 Release v{new_version} prepared successfully!")
        print(f"📝 Release notes: {release_notes}")
        print("\nNext steps:")
        print("1. Review and update the release notes")
        print("2. Commit changes: git add . && git commit -m 'CPU Monitor1 Release v{new_version}'")
        print("3. Create tag: git tag -a v{new_version} -m 'CPU Monitor1 Release v{new_version}'")
        print("4. Push: git push origin main && git push --tags")
        print("5. Create GitHub release with the notes")
        
    except Exception as e:
        print(f"❌ Error during release: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
